package querygraph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.44

import (
	"context"
	query "cqrs-es-example-go/pkg/query/interfaceAdaptor/graph/model"
	"database/sql"
	"fmt"
	"time"
)

// GetGroupChat is the resolver for the getGroupChat field.
func (r *queryRootResolver) GetGroupChat(ctx context.Context, groupChatID string, userAccountID string) (*query.GroupChat, error) {
	stmt, err := r.db.Prepare(
		`SELECT gc.id, gc.name, gc.owner_id, gc.created_at, gc.updated_at
					 FROM group_chats AS gc JOIN members AS m ON gc.id = m.group_chat_id
					 WHERE gc.disabled = 'false' AND m.group_chat_id = ? AND m.user_account_id = ?`)
	if err != nil {
		return nil, err
	}
	defer func(stmt *sql.Stmt) {
		err := stmt.Close()
		if err != nil {
			panic(err.Error())
		}
	}(stmt)
	row := stmt.QueryRow(groupChatID, userAccountID)
	if row != nil {
		var id string
		var name string
		var ownerID string
		var createdAt time.Time
		var updatedAt time.Time
		err = row.Scan(&id, &name, &ownerID, &createdAt, &updatedAt)
		if err != nil {
			return nil, err
		}
		return &query.GroupChat{
			ID:        id,
			Name:      name,
			OwnerID:   ownerID,
			CreatedAt: createdAt.String(),
			UpdatedAt: updatedAt.String(),
		}, nil
	}
	return nil, nil
}

// GetGroupChats is the resolver for the getGroupChats field.
func (r *queryRootResolver) GetGroupChats(ctx context.Context, userAccountID string) ([]*query.GroupChat, error) {
	stmt, err := r.db.Prepare(
		`SELECT gc.id, gc.name, gc.owner_id, gc.created_at, gc.updated_at
					 FROM group_chats AS gc JOIN members AS m ON gc.id = m.group_chat_id
           WHERE gc.disabled = 'false' AND m.user_account_id = ?`)
	if err != nil {
		return nil, err
	}
	defer func(stmt *sql.Stmt) {
		err := stmt.Close()
		if err != nil {
			panic(err.Error())
		}
	}(stmt)
	rows, err := stmt.Query(userAccountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()

	results := make([]*query.GroupChat, 0)
	for rows.Next() {
		var id string
		var name string
		var ownerID string
		var createdAt time.Time
		var updatedAt time.Time
		err = rows.Scan(&id, &name, &ownerID, &createdAt, &updatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, &query.GroupChat{
			ID:        id,
			Name:      name,
			OwnerID:   ownerID,
			CreatedAt: createdAt.String(),
			UpdatedAt: updatedAt.String(),
		})

	}
	return results, nil
}

// GetMember is the resolver for the getMember field.
func (r *queryRootResolver) GetMember(ctx context.Context, groupChatID string, userAccountID string) (*query.Member, error) {
	stmt, err := r.db.Prepare(
		`SELECT m.id, m.group_chat_id, m.user_account_id, m.role, m.created_at, m.updated_at
					 FROM group_chats AS gc JOIN members AS m ON gc.id = m.group_chat_id
					 WHERE gc.disabled = 'false' AND m.group_chat_id = ? AND m.user_account_id = ?`)
	if err != nil {
		return nil, err
	}
	defer func(stmt *sql.Stmt) {
		err := stmt.Close()
		if err != nil {
			panic(err.Error())
		}
	}(stmt)
	row := stmt.QueryRow(groupChatID, userAccountID)
	if row != nil {
		var id string
		var groupChatId string
		var userAccountId string
		var role string
		var createdAt time.Time
		var updatedAt time.Time
		err = row.Scan(&id, &groupChatId, &userAccountId, &role, &createdAt, &updatedAt)
		if err != nil {
			return nil, err
		}
		return &query.Member{
			ID:            id,
			GroupChatID:   groupChatId,
			UserAccountID: userAccountId,
			Role:          role,
			CreatedAt:     createdAt.String(),
			UpdatedAt:     updatedAt.String(),
		}, nil
	}
	return nil, nil
}

// GetMembers is the resolver for the getMembers field.
func (r *queryRootResolver) GetMembers(ctx context.Context, groupChatID string, userAccountID string) ([]*query.Member, error) {
	stmt, err := r.db.Prepare(
		`SELECT m.id, m.group_chat_id, m.user_account_id, m.role, m.created_at, m.updated_at
           FROM group_chats AS gc JOIN members AS m ON gc.id = m.group_chat_id
           WHERE gc.disabled = 'false' AND m.group_chat_id = ?
						AND EXISTS (SELECT 1 FROM members AS m2 WHERE m2.group_chat_id = m.group_chat_id AND m2.user_account_id = ?)`)
	if err != nil {
		return nil, err
	}
	defer func(stmt *sql.Stmt) {
		err := stmt.Close()
		if err != nil {
			panic(err.Error())
		}
	}(stmt)
	rows, err := stmt.Query(groupChatID, userAccountID)
	if err != nil {
		return nil, err
	}
	defer func(rows *sql.Rows) {
		err := rows.Close()
		if err != nil {
			panic(err.Error())
		}
	}(rows)

	results := make([]*query.Member, 0)
	for rows.Next() {
		var id string
		var groupChatId string
		var userAccountId string
		var role string
		var createdAt time.Time
		var updatedAt time.Time
		err = rows.Scan(&id, &groupChatId, &userAccountId, &role, &createdAt, &updatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, &query.Member{
			ID:            id,
			GroupChatID:   groupChatId,
			UserAccountID: userAccountId,
			Role:          role,
			CreatedAt:     createdAt.String(),
			UpdatedAt:     updatedAt.String(),
		})

	}
	return results, nil
}

// GetMessage is the resolver for the getMessage field.
func (r *queryRootResolver) GetMessage(ctx context.Context, messageID string, userAccountID string) (*query.Message, error) {
	stmt, err := r.db.Prepare(
		`SELECT m.id, m.group_chat_id, m.user_account_id, m.text, m.created_at, m.updated_at
					 FROM group_chats AS gc JOIN messages AS m ON gc.id = m.group_chat_id
           WHERE gc.disabled = 'false' AND m.disabled = 'false' AND m.id = ?
            AND EXISTS ( SELECT 1 FROM members AS mem WHERE mem.group_chat_id = m.group_chat_id AND mem.user_account_id = ? )`)
	if err != nil {
		return nil, err
	}
	defer func(stmt *sql.Stmt) {
		err := stmt.Close()
		if err != nil {
			panic(err.Error())
		}
	}(stmt)
	row := stmt.QueryRow(messageID, userAccountID)
	if row != nil {
		var id string
		var groupChatId string
		var userAccountId string
		var text string
		var createdAt time.Time
		var updatedAt time.Time
		err = row.Scan(&id, &groupChatId, &userAccountId, &text, &createdAt, &updatedAt)
		if err != nil {
			return nil, err
		}
		return &query.Message{
			ID:            id,
			GroupChatID:   groupChatId,
			UserAccountID: userAccountId,
			Text:          text,
			CreatedAt:     createdAt.String(),
			UpdatedAt:     updatedAt.String(),
		}, nil
	}
	return nil, nil
}

// GetMessages is the resolver for the getMessages field.
func (r *queryRootResolver) GetMessages(ctx context.Context, groupChatID string, userAccountID string) ([]*query.Message, error) {
	stmt, err := r.db.Prepare(
		`SELECT m.id, m.group_chat_id, m.user_account_id, m.text, m.created_at, m.updated_at
					 FROM group_chats AS gc JOIN messages AS m ON gc.id = m.group_chat_id
           WHERE gc.disabled = 'false' AND m.disabled = 'false' AND m.group_chat_id = ?
            AND EXISTS (SELECT 1 FROM members AS mem WHERE mem.group_chat_id = m.group_chat_id AND mem.user_account_id = ?)`)
	if err != nil {
		return nil, err
	}
	defer func(stmt *sql.Stmt) {
		err := stmt.Close()
		if err != nil {
			panic(err.Error())
		}
	}(stmt)
	rows, err := stmt.Query(groupChatID, userAccountID)
	if err != nil {
		return nil, err
	}
	defer func(rows *sql.Rows) {
		err := rows.Close()
		if err != nil {
			panic(err.Error())
		}
	}(rows)

	results := make([]*query.Message, 0)
	for rows.Next() {
		var id string
		var groupChatId string
		var userAccountId string
		var text string
		var createdAt time.Time
		var updatedAt time.Time
		err = rows.Scan(&id, &groupChatId, &userAccountId, &text, &createdAt, &updatedAt)
		if err != nil {
			return nil, err
		}
		results = append(results, &query.Message{
			ID:            id,
			GroupChatID:   groupChatId,
			UserAccountID: userAccountId,
			Text:          text,
			CreatedAt:     createdAt.String(),
			UpdatedAt:     updatedAt.String(),
		})

	}
	return results, nil
}

// GroupChats is the resolver for the groupChats field.
func (r *subscriptionRootResolver) GroupChats(ctx context.Context, groupChatID string) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: GroupChats - groupChats"))
}

// QueryRoot returns QueryRootResolver implementation.
func (r *Resolver) QueryRoot() QueryRootResolver { return &queryRootResolver{r} }

// SubscriptionRoot returns SubscriptionRootResolver implementation.
func (r *Resolver) SubscriptionRoot() SubscriptionRootResolver { return &subscriptionRootResolver{r} }

type queryRootResolver struct{ *Resolver }
type subscriptionRootResolver struct{ *Resolver }
